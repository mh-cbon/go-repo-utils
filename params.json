{
  "name": "Go-repo-utils",
  "tagline": "Go tool to speak with repositories",
  "body": "# go-repo-utils\r\n\r\nGo tool to speak with repositories.\r\n\r\nIt can list tags, tell if a directory is clean, create tag.\r\n\r\nIt can speak with `hg` `git` `bzr` `svn`\r\n\r\nThis tool is part of the [go-github-release workflow](https://github.com/mh-cbon/go-github-release)\r\n\r\n# Install\r\n\r\nPick an msi package [here](https://github.com/mh-cbon/go-repo-utils/releases)!\r\n\r\n__chocolatey__\r\n\r\n```sh\r\nchoco install go-repo-utils\r\n```\r\n\r\n__deb/rpm repositories__\r\n\r\n```sh\r\nwget -O - https://raw.githubusercontent.com/mh-cbon/latest/master/source.sh \\\r\n| GH=mh-cbon/go-repo-utils sh -xe\r\n# or\r\ncurl -L https://raw.githubusercontent.com/mh-cbon/latest/master/source.sh \\\r\n| GH=mh-cbon/go-repo-utils sh -xe\r\n```\r\n\r\n__deb/rpm packages__\r\n\r\n```sh\r\ncurl -L https://raw.githubusercontent.com/mh-cbon/latest/master/install.sh \\\r\n| GH=mh-cbon/go-repo-utils sh -xe\r\n# or\r\nwget -q -O - --no-check-certificate \\\r\nhttps://raw.githubusercontent.com/mh-cbon/latest/master/install.sh \\\r\n| GH=mh-cbon/go-repo-utils sh -xe\r\n```\r\n\r\n__go__\r\n\r\n```sh\r\nmkdir -p $GOPATH/src/github.com/mh-cbon\r\ncd $GOPATH/src/github.com/mh-cbon\r\ngit clone https://github.com/mh-cbon/go-repo-utils.git\r\ncd go-repo-utils\r\nglide install\r\ngo install\r\n```\r\n\r\n# Usage\r\n\r\n```sh\r\nGo repo utils\r\n\r\nUsage:\r\n  go-repo-utils list-tags [-j|--json] [-a|--any] [-r|--reverse] [--path=<path>|-p <path>]\r\n  go-repo-utils list-commits [--path=<path>|-p <path>] [--since=<tag>|-s <tag>] [--until=<tag>|-u <tag>] [-r|--reverse] [--orderbydate]\r\n  go-repo-utils is-clean [-j|--json] [--path=<path>|-p=<path>]\r\n  go-repo-utils create-tag <tag> [-j|--json] [--path=<path>|-p <path>] [-m <message>]\r\n  go-repo-utils first-rev [-j|--json] [--path=<path>|-p <path>]\r\n  go-repo-utils -h | --help\r\n  go-repo-utils -v | --version\r\n\r\nOptions:\r\n  -h --help             Show this screen.\r\n  -v --version          Show version.\r\n  -p <c> --path=<c>     Path to lookup [default: cwd].\r\n  -s <c> --since=<c>    Since tag, revision, expression.\r\n  -u <c> --until=<c>    To tag, revision, expression.\r\n  -j --json             Print JSON encoded data.\r\n  -a --any              List all tags.\r\n  -r --reverse          Reverse tags ordering.\r\n  -m                    Message for the tag.\r\n  --orderbydate         Order commits by date.\r\n\r\nNotes:\r\n  list-tags     List only valid semver tags unless -a|--any options is provided.\r\n  is-clean      Ignores untracked files.\r\n  create-tag    With svn, it always create a new tag folder at /tags/<tag>.\r\n  list-commits  Can receive an expression (hg, bzr), if it does not match a tag name.\r\n                Expression may be automatically adjusted at runtime if it is empty (svn,hg,bzr),\r\n                or matching a tag name.\r\n                HEAD will be normalized given the target vcs (svn,hg,bzr).\r\n\r\nExamples\r\n  # list tags\r\n  go-repo-utils list-tags\r\n\r\n  # list tags with json response\r\n  go-repo-utils list-tags -j --path=/some/where\r\n\r\n  # check if a directory is clean\r\n  go-repo-utis is-clean -p /some/where\r\n\r\n  # create tag\r\n  go-repo-utils create-tag 1.0.3 -m \"tag message\"\r\n```\r\n\r\n#### Enable debug messages\r\n\r\nTo enable debug messages, just set `VERBOSE=go-repo-utils` before running the command.\r\n\r\n```sh\r\nVERBOSE=go-repo-utils go-repo-utils is-clean\r\n```\r\n\r\n# Usage as lib\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n  \"fmt\"\r\n\r\n  \"github.com/mh-cbon/go-repo-utils/repoutils\"\r\n)\r\n\r\nfunc main() {\r\n\r\n  path := \"path/to/folder\"\r\n\r\n  vcs, err := repoutils.WhichVcs(path)\r\n  if err!=nil {\r\n    log.Println(err)\r\n    os.Exit(1)\r\n  }\r\n\r\n  tags := make([]string, 0)\r\n  tags, _ := repoutils.List(vcs, path)\r\n  fmt.Println(tags)\r\n\r\n  isClean, _ := repoutils.IsClean(vcs, path)\r\n  fmt.Println(isClean)\r\n\r\n  ok, _, _ := repoutils.CreateTag(vcs, path, \"1.0.3\")\r\n  fmt.Println(ok)\r\n}\r\n\r\n```\r\n\r\n# Tests\r\n\r\nTo run the tests, `sh vagrant/test.sh`, which will do all necessary stuff to run the tests\r\n\r\n# See also\r\n\r\n- https://github.com/Masterminds/vcs\r\n\r\nA way more complete and better api, with a different approach.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}